type Query {
  version: String!
  workers: WorkersQueryResult!
  health: HealthQueryResult!
  queue: QueueQueryResult!
  torrent: TorrentQuery!
  torrentContent: TorrentContentQuery!
}

type TorrentQuery {
  suggestTags(query: SuggestTagsQueryInput): TorrentSuggestTagsResult!
}

input SuggestTagsQueryInput {
  prefix: String
  exclusions: [String!]
}

type TorrentSuggestTagsResult {
  suggestions: [SuggestedTag!]!
}

type SuggestedTag {
  name: String!
  count: Int!
}

type TorrentContentQuery {
  search(
    query: TorrentContentSearchQueryInput!
  ): TorrentContentSearchResult!
}

type Worker {
  key: String!
  started: Boolean!
}

type WorkersQueryResult {
  all: [Worker!]!
}

enum HealthStatus {
  unknown
  inactive
  up
  down
}

type HealthCheck {
  key: String!
  status: HealthStatus!
  timestamp: DateTime!
  error: String
}

type HealthQueryResult {
  status: HealthStatus!
  checks: [HealthCheck!]!
}
