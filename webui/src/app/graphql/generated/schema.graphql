# THIS FILE IS GENERATED, DO NOT EDIT!

"""
The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.
"""
directive @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT

type Content {
  adult: Boolean
  attributes: [ContentAttribute!]!
  collections: [ContentCollection!]!
  createdAt: DateTime!
  externalLinks: [ExternalLink!]!
  id: String!
  metadataSource: MetadataSource!
  originalLanguage: LanguageInfo
  originalTitle: String
  overview: String
  popularity: Float
  releaseDate: Date
  releaseYear: Year
  runtime: Int
  source: String!
  title: String!
  type: ContentType!
  updatedAt: DateTime!
  voteAverage: Float
  voteCount: Int
}

type ContentAttribute {
  createdAt: DateTime!
  key: String!
  metadataSource: MetadataSource!
  source: String!
  updatedAt: DateTime!
  value: String!
}

type ContentCollection {
  createdAt: DateTime!
  id: String!
  metadataSource: MetadataSource!
  name: String!
  source: String!
  type: String!
  updatedAt: DateTime!
}

enum ContentType {
  book
  game
  movie
  music
  software
  tv_show
  xxx
}

type ContentTypeAgg {
  count: Int!
  label: String!
  value: ContentType
}

input ContentTypeFacetInput {
  aggregate: Boolean
  filter: [ContentType]
}

scalar Date

scalar DateTime

type Episodes {
  label: String!
  seasons: [Season!]!
}

type ExternalLink {
  metadataSource: MetadataSource!
  url: String!
}

enum FacetLogic {
  and
  or
}

enum FileType {
  archive
  audio
  data
  document
  image
  software
  subtitles
  video
}

type GenreAgg {
  count: Int!
  label: String!
  value: String!
}

input GenreFacetInput {
  aggregate: Boolean
  filter: [String!]
  logic: FacetLogic
}

scalar Hash20

enum Language {
  af
  ar
  az
  be
  bg
  bs
  ca
  ce
  co
  cs
  cy
  da
  de
  el
  en
  es
  et
  eu
  fa
  fi
  fr
  he
  hi
  hr
  hu
  hy
  id
  is
  it
  ja
  ka
  ko
  ku
  lt
  lv
  mi
  mk
  ml
  mn
  ms
  mt
  nl
  no
  pl
  pt
  ro
  ru
  sa
  sk
  sl
  sm
  so
  sr
  sv
  ta
  th
  tr
  uk
  vi
  yi
  zh
  zu
}

type LanguageAgg {
  count: Int!
  label: String!
  value: Language!
}

input LanguageFacetInput {
  aggregate: Boolean
  filter: [Language!]
}

type LanguageInfo {
  id: String!
  name: String!
}

type MetadataSource {
  key: String!
  name: String!
}

type Mutation {
  torrent: TorrentMutation!
}

type Query {
  search: SearchQuery!
}

type ReleaseYearAgg {
  count: Int!
  label: String!
  value: Year
}

input ReleaseYearFacetInput {
  aggregate: Boolean
  filter: [Year]
}

type SearchQuery {
  torrentContent(facets: TorrentContentFacetsInput, query: SearchQueryInput): TorrentContentResult!
}

input SearchQueryInput {
  cached: Boolean
  limit: Int
  offset: Int
  queryString: String
  totalCount: Boolean
}

type Season {
  episodes: [Int!]
  season: Int!
}

type Torrent {
  createdAt: DateTime!
  extension: String
  fileType: FileType
  fileTypes: [FileType!]
  files: [TorrentFile!]
  hasFilesInfo: Boolean!
  infoHash: Hash20!
  leechers: Int
  name: String!
  private: Boolean!
  seeders: Int
  singleFile: Boolean
  size: Int!
  sources: [TorrentSource!]!
  tagNames: [String!]!
  updatedAt: DateTime!
}

type TorrentContent {
  content: Content
  contentId: String
  contentSource: String
  contentType: ContentType
  createdAt: DateTime!
  episodes: Episodes
  id: ID!
  infoHash: Hash20!
  languages: [LanguageInfo!]
  releaseDate: Date
  releaseGroup: String
  releaseYear: Year
  title: String!
  torrent: Torrent!
  updatedAt: DateTime!
  video3d: Video3d
  videoCodec: VideoCodec
  videoModifier: VideoModifier
  videoResolution: VideoResolution
  videoSource: VideoSource
}

type TorrentContentAggregations {
  contentType: [ContentTypeAgg!]
  genre: [GenreAgg!]
  language: [LanguageAgg!]
  releaseYear: [ReleaseYearAgg!]
  torrentFileType: [TorrentFileTypeAgg!]
  torrentSource: [TorrentSourceAgg!]
  torrentTag: [TorrentTagAgg!]
  videoResolution: [VideoResolutionAgg!]
  videoSource: [VideoSourceAgg!]
}

input TorrentContentFacetsInput {
  contentType: ContentTypeFacetInput
  genre: GenreFacetInput
  language: LanguageFacetInput
  releaseYear: ReleaseYearFacetInput
  torrentFileType: TorrentFileTypeFacetInput
  torrentSource: TorrentSourceFacetInput
  torrentTag: TorrentTagFacetInput
  videoResolution: VideoResolutionFacetInput
  videoSource: VideoSourceFacetInput
}

type TorrentContentResult {
  aggregations: TorrentContentAggregations!
  items: [TorrentContent!]!
  totalCount: Int!
}

type TorrentFile {
  createdAt: DateTime!
  extension: String
  fileType: FileType
  index: Int!
  infoHash: Hash20!
  path: String!
  size: Int!
  updatedAt: DateTime!
}

type TorrentFileTypeAgg {
  count: Int!
  label: String!
  value: FileType!
}

input TorrentFileTypeFacetInput {
  aggregate: Boolean
  filter: [FileType!]
  logic: FacetLogic
}

type TorrentMutation {
  deleteTags(infoHashes: [Hash20!], tagNames: [String!]): Void
  putTags(infoHashes: [Hash20!]!, tagNames: [String!]!): Void
  setTags(infoHashes: [Hash20!]!, tagNames: [String!]!): Void
}

type TorrentSource {
  importId: String
  key: String!
  leechers: Int
  name: String!
  seeders: Int
}

type TorrentSourceAgg {
  count: Int!
  label: String!
  value: String!
}

input TorrentSourceFacetInput {
  aggregate: Boolean
  filter: [String!]
  logic: FacetLogic
}

type TorrentTagAgg {
  count: Int!
  label: String!
  value: String!
}

input TorrentTagFacetInput {
  aggregate: Boolean
  filter: [String!]
  logic: FacetLogic
}

enum Video3d {
  V3D
  V3DOU
  V3DSBS
}

enum VideoCodec {
  DivX
  H264
  MPEG2
  MPEG4
  XviD
  x264
  x265
}

enum VideoModifier {
  BRDISK
  RAWHD
  REGIONAL
  REMUX
  SCREENER
}

enum VideoResolution {
  V360p
  V480p
  V540p
  V576p
  V720p
  V1080p
  V1440p
  V2160p
  V4320p
}

type VideoResolutionAgg {
  count: Int!
  label: String!
  value: VideoResolution
}

input VideoResolutionFacetInput {
  aggregate: Boolean
  filter: [VideoResolution]
}

enum VideoSource {
  BluRay
  CAM
  DVD
  TELECINE
  TELESYNC
  TV
  WEBDL
  WEBRip
  WORKPRINT
}

type VideoSourceAgg {
  count: Int!
  label: String!
  value: VideoSource
}

input VideoSourceFacetInput {
  aggregate: Boolean
  filter: [VideoSource]
}

scalar Void

scalar Year