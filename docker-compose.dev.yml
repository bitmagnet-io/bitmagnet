services:
  # This service definition is for running bitmagnet from source code.
  # The default entrypoint of Dockerfile_dev is `tail -f /dev/null`.
  # From there you can open a shell into the container with `docker exec -it bitmagnet sh`, then run bitmagnet with `go run .`.
  # To automatically start bitmagnet when using Dockerfile_dev, enable the `entrypoint` and `command` parameters below.
  # To run the container image from ghcr.io instead, disable the `build` parameter and enable the `image` parameter.
  bitmagnet:
    container_name: bitmagnet
    build:
      context: .
      dockerfile: Dockerfile_dev
    # image: ghcr.io/bitmagnet-io/bitmagnet:latest
    volumes:
      - ./:/app
      # Mount data folder (currently only used for logs when file rotation is enabled):
      - ./data/bitmagnet:/root/.local/share/bitmagnet
    ports:
      - "3333:3333"
      # BitTorrent ports:
      - "3334:3334/tcp"
      - "3334:3334/udp"
    restart: unless-stopped
    environment:
      # Enable logging to rotating files for ingest to Loki:
      - LOG_FILE_ROTATOR_ENABLED=true
      - POSTGRES_HOST=postgres
      - POSTGRES_PASSWORD=postgres
      - REDIS_ADDR=redis:6379
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
  #    entrypoint: ["go", "run", "."]
  #    command:
  #      - worker
  #      - run
  #      - --keys=http_server
  #      - --keys=queue_server
  #      - --keys=dht_crawler

  postgres:
    image: postgres:16-alpine
    container_name: bitmagnet-postgres
    volumes:
      - ./data/postgres:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    restart: unless-stopped
    environment:
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=bitmagnet
      - PGUSER=postgres
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 10s
      start_period: 20s

  redis:
    image: redis:7-alpine
    container_name: bitmagnet-redis
    volumes:
      - ./data/redis:/data
    ports:
      - "6380:6379"
    restart: unless-stopped
    entrypoint:
      - redis-server
      - --save 60 1
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      start_period: 20s

  # Optional observability services:
  # (ensure you have the config files in the `observability` directory in your project root)

  # Visualization and dashboards:
  grafana:
    container_name: bitmagnet-grafana
    image: grafana/grafana:latest
    environment:
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
    volumes:
      - ./data/grafana:/var/lib/grafana
      # Provisioned data sources and dashboards:
      - ./observability/grafana.datasources.yaml:/etc/grafana/provisioning/datasources/datasources.yaml
      - ./observability/grafana.dashboards.yaml:/etc/grafana/provisioning/dashboards/dashboards.yaml
      - ./observability/grafana-dashboards:/etc/dashboards
    ports:
      - "3000:3000"

  # Metrics and logs scraping:
  grafana-agent:
    container_name: bitmagnet-grafana-agent
    image: grafana/agent:latest
    volumes:
      - ./data/bitmagnet/logs:/var/log/bitmagnet
      # Mount the logs and metrics scraping configurations:
      - ./observability/grafana-agent.config.river:/etc/agent-config/config.river
    command:
      - run
      - /etc/agent-config/config.river
      - --server.http.listen-addr=0.0.0.0:12345
    environment:
      HOSTNAME: grafana-agent
      AGENT_MODE: flow
      LOKI_HOST: loki:3100
      POSTGRES_HOST: postgres:5432
      REDIS_HOST: redis:6379
    ports:
      - "12345:12345"
    depends_on:
      - loki

  # Metrics storage and aggregation:
  prometheus:
    image: prom/prometheus:latest
    container_name: bitmagnet-prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
    ports:
      - 9090:9090
    restart: unless-stopped
    volumes:
      - ./data/prometheus:/prometheus
      - ./observability/prometheus.config.yaml:/etc/prometheus/prometheus.yml

  # Log storage and aggregation:
  loki:
    container_name: bitmagnet-loki
    image: grafana/loki:latest
    ports:
      - "3100:3100"
    volumes:
      - ./data/loki:/loki
      - ./observability/loki.config.yaml:/etc/loki/local-config.yaml
    command: -config.file=/etc/loki/local-config.yaml

  # Runtime profiling:
  pyroscope:
    container_name: bitmagnet-pyroscope
    image: grafana/pyroscope:latest
    deploy:
      restart_policy:
        condition: on-failure
    ports:
      - "4040:4040"
    command:
      - "server"
    volumes:
      - ./observability/pyroscope.config.yaml:/etc/pyroscope/server.yaml
      - ./data/pyroscope:/var/lib/pyroscope

  # Prometheus metrics for Postgres:
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:latest
    container_name: bitmagnet-postgres-exporter
    ports:
      - 9187:9187
    environment:
      DATA_SOURCE_NAME: "postgresql://postgres:postgres@postgres:5432/bitmagnet?sslmode=disable"
    links:
      - postgres
      - prometheus
