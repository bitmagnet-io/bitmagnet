// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/bitmagnet-io/bitmagnet/internal/model"
)

func newBloomFilter(db *gorm.DB, opts ...gen.DOOption) bloomFilter {
	_bloomFilter := bloomFilter{}

	_bloomFilter.bloomFilterDo.UseDB(db, opts...)
	_bloomFilter.bloomFilterDo.UseModel(&model.BloomFilter{})

	tableName := _bloomFilter.bloomFilterDo.TableName()
	_bloomFilter.ALL = field.NewAsterisk(tableName)
	_bloomFilter.Key = field.NewString(tableName, "key")
	_bloomFilter.Filter = field.NewField(tableName, "bytes")
	_bloomFilter.CreatedAt = field.NewTime(tableName, "created_at")
	_bloomFilter.UpdatedAt = field.NewTime(tableName, "updated_at")

	_bloomFilter.fillFieldMap()

	return _bloomFilter
}

type bloomFilter struct {
	bloomFilterDo

	ALL       field.Asterisk
	Key       field.String
	Filter    field.Field
	CreatedAt field.Time
	UpdatedAt field.Time

	fieldMap map[string]field.Expr
}

func (b bloomFilter) Table(newTableName string) *bloomFilter {
	b.bloomFilterDo.UseTable(newTableName)
	return b.updateTableName(newTableName)
}

func (b bloomFilter) As(alias string) *bloomFilter {
	b.bloomFilterDo.DO = *(b.bloomFilterDo.As(alias).(*gen.DO))
	return b.updateTableName(alias)
}

func (b *bloomFilter) updateTableName(table string) *bloomFilter {
	b.ALL = field.NewAsterisk(table)
	b.Key = field.NewString(table, "key")
	b.Filter = field.NewField(table, "bytes")
	b.CreatedAt = field.NewTime(table, "created_at")
	b.UpdatedAt = field.NewTime(table, "updated_at")

	b.fillFieldMap()

	return b
}

func (b *bloomFilter) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := b.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (b *bloomFilter) fillFieldMap() {
	b.fieldMap = make(map[string]field.Expr, 4)
	b.fieldMap["key"] = b.Key
	b.fieldMap["bytes"] = b.Filter
	b.fieldMap["created_at"] = b.CreatedAt
	b.fieldMap["updated_at"] = b.UpdatedAt
}

func (b bloomFilter) clone(db *gorm.DB) bloomFilter {
	b.bloomFilterDo.ReplaceConnPool(db.Statement.ConnPool)
	return b
}

func (b bloomFilter) replaceDB(db *gorm.DB) bloomFilter {
	b.bloomFilterDo.ReplaceDB(db)
	return b
}

type bloomFilterDo struct{ gen.DO }

type IBloomFilterDo interface {
	gen.SubQuery
	Debug() IBloomFilterDo
	WithContext(ctx context.Context) IBloomFilterDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IBloomFilterDo
	WriteDB() IBloomFilterDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IBloomFilterDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IBloomFilterDo
	Not(conds ...gen.Condition) IBloomFilterDo
	Or(conds ...gen.Condition) IBloomFilterDo
	Select(conds ...field.Expr) IBloomFilterDo
	Where(conds ...gen.Condition) IBloomFilterDo
	Order(conds ...field.Expr) IBloomFilterDo
	Distinct(cols ...field.Expr) IBloomFilterDo
	Omit(cols ...field.Expr) IBloomFilterDo
	Join(table schema.Tabler, on ...field.Expr) IBloomFilterDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IBloomFilterDo
	RightJoin(table schema.Tabler, on ...field.Expr) IBloomFilterDo
	Group(cols ...field.Expr) IBloomFilterDo
	Having(conds ...gen.Condition) IBloomFilterDo
	Limit(limit int) IBloomFilterDo
	Offset(offset int) IBloomFilterDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IBloomFilterDo
	Unscoped() IBloomFilterDo
	Create(values ...*model.BloomFilter) error
	CreateInBatches(values []*model.BloomFilter, batchSize int) error
	Save(values ...*model.BloomFilter) error
	First() (*model.BloomFilter, error)
	Take() (*model.BloomFilter, error)
	Last() (*model.BloomFilter, error)
	Find() ([]*model.BloomFilter, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.BloomFilter, err error)
	FindInBatches(result *[]*model.BloomFilter, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.BloomFilter) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IBloomFilterDo
	Assign(attrs ...field.AssignExpr) IBloomFilterDo
	Joins(fields ...field.RelationField) IBloomFilterDo
	Preload(fields ...field.RelationField) IBloomFilterDo
	FirstOrInit() (*model.BloomFilter, error)
	FirstOrCreate() (*model.BloomFilter, error)
	FindByPage(offset int, limit int) (result []*model.BloomFilter, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IBloomFilterDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (b bloomFilterDo) Debug() IBloomFilterDo {
	return b.withDO(b.DO.Debug())
}

func (b bloomFilterDo) WithContext(ctx context.Context) IBloomFilterDo {
	return b.withDO(b.DO.WithContext(ctx))
}

func (b bloomFilterDo) ReadDB() IBloomFilterDo {
	return b.Clauses(dbresolver.Read)
}

func (b bloomFilterDo) WriteDB() IBloomFilterDo {
	return b.Clauses(dbresolver.Write)
}

func (b bloomFilterDo) Session(config *gorm.Session) IBloomFilterDo {
	return b.withDO(b.DO.Session(config))
}

func (b bloomFilterDo) Clauses(conds ...clause.Expression) IBloomFilterDo {
	return b.withDO(b.DO.Clauses(conds...))
}

func (b bloomFilterDo) Returning(value interface{}, columns ...string) IBloomFilterDo {
	return b.withDO(b.DO.Returning(value, columns...))
}

func (b bloomFilterDo) Not(conds ...gen.Condition) IBloomFilterDo {
	return b.withDO(b.DO.Not(conds...))
}

func (b bloomFilterDo) Or(conds ...gen.Condition) IBloomFilterDo {
	return b.withDO(b.DO.Or(conds...))
}

func (b bloomFilterDo) Select(conds ...field.Expr) IBloomFilterDo {
	return b.withDO(b.DO.Select(conds...))
}

func (b bloomFilterDo) Where(conds ...gen.Condition) IBloomFilterDo {
	return b.withDO(b.DO.Where(conds...))
}

func (b bloomFilterDo) Order(conds ...field.Expr) IBloomFilterDo {
	return b.withDO(b.DO.Order(conds...))
}

func (b bloomFilterDo) Distinct(cols ...field.Expr) IBloomFilterDo {
	return b.withDO(b.DO.Distinct(cols...))
}

func (b bloomFilterDo) Omit(cols ...field.Expr) IBloomFilterDo {
	return b.withDO(b.DO.Omit(cols...))
}

func (b bloomFilterDo) Join(table schema.Tabler, on ...field.Expr) IBloomFilterDo {
	return b.withDO(b.DO.Join(table, on...))
}

func (b bloomFilterDo) LeftJoin(table schema.Tabler, on ...field.Expr) IBloomFilterDo {
	return b.withDO(b.DO.LeftJoin(table, on...))
}

func (b bloomFilterDo) RightJoin(table schema.Tabler, on ...field.Expr) IBloomFilterDo {
	return b.withDO(b.DO.RightJoin(table, on...))
}

func (b bloomFilterDo) Group(cols ...field.Expr) IBloomFilterDo {
	return b.withDO(b.DO.Group(cols...))
}

func (b bloomFilterDo) Having(conds ...gen.Condition) IBloomFilterDo {
	return b.withDO(b.DO.Having(conds...))
}

func (b bloomFilterDo) Limit(limit int) IBloomFilterDo {
	return b.withDO(b.DO.Limit(limit))
}

func (b bloomFilterDo) Offset(offset int) IBloomFilterDo {
	return b.withDO(b.DO.Offset(offset))
}

func (b bloomFilterDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IBloomFilterDo {
	return b.withDO(b.DO.Scopes(funcs...))
}

func (b bloomFilterDo) Unscoped() IBloomFilterDo {
	return b.withDO(b.DO.Unscoped())
}

func (b bloomFilterDo) Create(values ...*model.BloomFilter) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Create(values)
}

func (b bloomFilterDo) CreateInBatches(values []*model.BloomFilter, batchSize int) error {
	return b.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (b bloomFilterDo) Save(values ...*model.BloomFilter) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Save(values)
}

func (b bloomFilterDo) First() (*model.BloomFilter, error) {
	if result, err := b.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.BloomFilter), nil
	}
}

func (b bloomFilterDo) Take() (*model.BloomFilter, error) {
	if result, err := b.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.BloomFilter), nil
	}
}

func (b bloomFilterDo) Last() (*model.BloomFilter, error) {
	if result, err := b.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.BloomFilter), nil
	}
}

func (b bloomFilterDo) Find() ([]*model.BloomFilter, error) {
	result, err := b.DO.Find()
	return result.([]*model.BloomFilter), err
}

func (b bloomFilterDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.BloomFilter, err error) {
	buf := make([]*model.BloomFilter, 0, batchSize)
	err = b.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (b bloomFilterDo) FindInBatches(result *[]*model.BloomFilter, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return b.DO.FindInBatches(result, batchSize, fc)
}

func (b bloomFilterDo) Attrs(attrs ...field.AssignExpr) IBloomFilterDo {
	return b.withDO(b.DO.Attrs(attrs...))
}

func (b bloomFilterDo) Assign(attrs ...field.AssignExpr) IBloomFilterDo {
	return b.withDO(b.DO.Assign(attrs...))
}

func (b bloomFilterDo) Joins(fields ...field.RelationField) IBloomFilterDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Joins(_f))
	}
	return &b
}

func (b bloomFilterDo) Preload(fields ...field.RelationField) IBloomFilterDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Preload(_f))
	}
	return &b
}

func (b bloomFilterDo) FirstOrInit() (*model.BloomFilter, error) {
	if result, err := b.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.BloomFilter), nil
	}
}

func (b bloomFilterDo) FirstOrCreate() (*model.BloomFilter, error) {
	if result, err := b.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.BloomFilter), nil
	}
}

func (b bloomFilterDo) FindByPage(offset int, limit int) (result []*model.BloomFilter, count int64, err error) {
	result, err = b.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = b.Offset(-1).Limit(-1).Count()
	return
}

func (b bloomFilterDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = b.Count()
	if err != nil {
		return
	}

	err = b.Offset(offset).Limit(limit).Scan(result)
	return
}

func (b bloomFilterDo) Scan(result interface{}) (err error) {
	return b.DO.Scan(result)
}

func (b bloomFilterDo) Delete(models ...*model.BloomFilter) (result gen.ResultInfo, err error) {
	return b.DO.Delete(models)
}

func (b *bloomFilterDo) withDO(do gen.Dao) *bloomFilterDo {
	b.DO = *do.(*gen.DO)
	return b
}
