// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package model

import (
	"database/sql/driver"
	"encoding/json"
	"errors"
	"fmt"
	"io"
	"strings"
)

const (
	TsvectorLabelA TsvectorLabel = "A"
	TsvectorLabelB TsvectorLabel = "B"
	TsvectorLabelC TsvectorLabel = "C"
	TsvectorLabelD TsvectorLabel = "D"
)

var ErrInvalidTsvectorLabel = fmt.Errorf("not a valid TsvectorLabel, try [%s]", strings.Join(_TsvectorLabelNames, ", "))

var _TsvectorLabelNames = []string{
	string(TsvectorLabelA),
	string(TsvectorLabelB),
	string(TsvectorLabelC),
	string(TsvectorLabelD),
}

// TsvectorLabelNames returns a list of possible string values of TsvectorLabel.
func TsvectorLabelNames() []string {
	tmp := make([]string, len(_TsvectorLabelNames))
	copy(tmp, _TsvectorLabelNames)
	return tmp
}

// TsvectorLabelValues returns a list of the values for TsvectorLabel
func TsvectorLabelValues() []TsvectorLabel {
	return []TsvectorLabel{
		TsvectorLabelA,
		TsvectorLabelB,
		TsvectorLabelC,
		TsvectorLabelD,
	}
}

// String implements the Stringer interface.
func (x TsvectorLabel) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x TsvectorLabel) IsValid() bool {
	_, err := ParseTsvectorLabel(string(x))
	return err == nil
}

var _TsvectorLabelValue = map[string]TsvectorLabel{
	"A": TsvectorLabelA,
	"a": TsvectorLabelA,
	"B": TsvectorLabelB,
	"b": TsvectorLabelB,
	"C": TsvectorLabelC,
	"c": TsvectorLabelC,
	"D": TsvectorLabelD,
	"d": TsvectorLabelD,
}

// ParseTsvectorLabel attempts to convert a string to a TsvectorLabel.
func ParseTsvectorLabel(name string) (TsvectorLabel, error) {
	if x, ok := _TsvectorLabelValue[name]; ok {
		return x, nil
	}
	// Case insensitive parse, do a separate lookup to prevent unnecessary cost of lowercasing a string if we don't need to.
	if x, ok := _TsvectorLabelValue[strings.ToLower(name)]; ok {
		return x, nil
	}
	return TsvectorLabel(""), fmt.Errorf("%s is %w", name, ErrInvalidTsvectorLabel)
}

// MarshalText implements the text marshaller method.
func (x TsvectorLabel) MarshalText() ([]byte, error) {
	return []byte(string(x)), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *TsvectorLabel) UnmarshalText(text []byte) error {
	tmp, err := ParseTsvectorLabel(string(text))
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

var errTsvectorLabelNilPtr = errors.New("value pointer is nil") // one per type for package clashes

// Scan implements the Scanner interface.
func (x *TsvectorLabel) Scan(value interface{}) (err error) {
	if value == nil {
		*x = TsvectorLabel("")
		return
	}

	// A wider range of scannable types.
	// driver.Value values at the top of the list for expediency
	switch v := value.(type) {
	case string:
		*x, err = ParseTsvectorLabel(v)
	case []byte:
		*x, err = ParseTsvectorLabel(string(v))
	case TsvectorLabel:
		*x = v
	case *TsvectorLabel:
		if v == nil {
			return errTsvectorLabelNilPtr
		}
		*x = *v
	case *string:
		if v == nil {
			return errTsvectorLabelNilPtr
		}
		*x, err = ParseTsvectorLabel(*v)
	default:
		return errors.New("invalid type for TsvectorLabel")
	}

	return
}

// Value implements the driver Valuer interface.
func (x TsvectorLabel) Value() (driver.Value, error) {
	return x.String(), nil
}

type NullTsvectorLabel struct {
	TsvectorLabel TsvectorLabel
	Valid         bool
	Set           bool
}

func NewNullTsvectorLabel(val interface{}) (x NullTsvectorLabel) {
	err := x.Scan(val) // yes, we ignore this error, it will just be an invalid value.
	_ = err            // make any errcheck linters happy
	return
}

// Scan implements the Scanner interface.
func (x *NullTsvectorLabel) Scan(value interface{}) (err error) {
	if value == nil {
		x.TsvectorLabel, x.Valid = TsvectorLabel(""), false
		return
	}

	err = x.TsvectorLabel.Scan(value)
	x.Valid = (err == nil)
	return
}

// Value implements the driver Valuer interface.
func (x NullTsvectorLabel) Value() (driver.Value, error) {
	if !x.Valid {
		return nil, nil
	}
	return x.TsvectorLabel.String(), nil
}

// MarshalJSON correctly serializes a NullTsvectorLabel to JSON.
func (n NullTsvectorLabel) MarshalJSON() ([]byte, error) {
	const nullStr = "null"
	if n.Valid {
		return json.Marshal(n.TsvectorLabel)
	}
	return []byte(nullStr), nil
}

// UnmarshalJSON correctly deserializes a NullTsvectorLabel from JSON.
func (n *NullTsvectorLabel) UnmarshalJSON(b []byte) error {
	n.Set = true
	var x interface{}
	err := json.Unmarshal(b, &x)
	if err != nil {
		return err
	}
	err = n.Scan(x)
	return err
}

// MarshalGQL correctly serializes a NullTsvectorLabel to GraphQL.
func (n NullTsvectorLabel) MarshalGQL(w io.Writer) {
	bytes, err := json.Marshal(n)
	if err == nil {
		_, _ = w.Write(bytes)
	}
}

// UnmarshalGQL correctly deserializes a NullTsvectorLabel from GraphQL.
func (n *NullTsvectorLabel) UnmarshalGQL(v any) error {
	if v == nil {
		return nil
	}
	str, ok := v.(string)
	if !ok {
		return errors.New("value is not a string")
	}
	return n.UnmarshalJSON([]byte(str))
}
