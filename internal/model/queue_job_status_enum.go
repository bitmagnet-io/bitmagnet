// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package model

import (
	"database/sql/driver"
	"encoding/json"
	"errors"
	"fmt"
	"io"
	"strings"
)

const (
	QueueJobStatusPending   QueueJobStatus = "pending"
	QueueJobStatusProcessed QueueJobStatus = "processed"
	QueueJobStatusRetry     QueueJobStatus = "retry"
	QueueJobStatusFailed    QueueJobStatus = "failed"
)

var ErrInvalidQueueJobStatus = fmt.Errorf("not a valid QueueJobStatus, try [%s]", strings.Join(_QueueJobStatusNames, ", "))

var _QueueJobStatusNames = []string{
	string(QueueJobStatusPending),
	string(QueueJobStatusProcessed),
	string(QueueJobStatusRetry),
	string(QueueJobStatusFailed),
}

// QueueJobStatusNames returns a list of possible string values of QueueJobStatus.
func QueueJobStatusNames() []string {
	tmp := make([]string, len(_QueueJobStatusNames))
	copy(tmp, _QueueJobStatusNames)
	return tmp
}

// QueueJobStatusValues returns a list of the values for QueueJobStatus
func QueueJobStatusValues() []QueueJobStatus {
	return []QueueJobStatus{
		QueueJobStatusPending,
		QueueJobStatusProcessed,
		QueueJobStatusRetry,
		QueueJobStatusFailed,
	}
}

// String implements the Stringer interface.
func (x QueueJobStatus) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x QueueJobStatus) IsValid() bool {
	_, err := ParseQueueJobStatus(string(x))
	return err == nil
}

var _QueueJobStatusValue = map[string]QueueJobStatus{
	"pending":   QueueJobStatusPending,
	"processed": QueueJobStatusProcessed,
	"retry":     QueueJobStatusRetry,
	"failed":    QueueJobStatusFailed,
}

// ParseQueueJobStatus attempts to convert a string to a QueueJobStatus.
func ParseQueueJobStatus(name string) (QueueJobStatus, error) {
	if x, ok := _QueueJobStatusValue[name]; ok {
		return x, nil
	}
	// Case insensitive parse, do a separate lookup to prevent unnecessary cost of lowercasing a string if we don't need to.
	if x, ok := _QueueJobStatusValue[strings.ToLower(name)]; ok {
		return x, nil
	}
	return QueueJobStatus(""), fmt.Errorf("%s is %w", name, ErrInvalidQueueJobStatus)
}

// MarshalText implements the text marshaller method.
func (x QueueJobStatus) MarshalText() ([]byte, error) {
	return []byte(string(x)), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *QueueJobStatus) UnmarshalText(text []byte) error {
	tmp, err := ParseQueueJobStatus(string(text))
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

var errQueueJobStatusNilPtr = errors.New("value pointer is nil") // one per type for package clashes

// Scan implements the Scanner interface.
func (x *QueueJobStatus) Scan(value interface{}) (err error) {
	if value == nil {
		*x = QueueJobStatus("")
		return
	}

	// A wider range of scannable types.
	// driver.Value values at the top of the list for expediency
	switch v := value.(type) {
	case string:
		*x, err = ParseQueueJobStatus(v)
	case []byte:
		*x, err = ParseQueueJobStatus(string(v))
	case QueueJobStatus:
		*x = v
	case *QueueJobStatus:
		if v == nil {
			return errQueueJobStatusNilPtr
		}
		*x = *v
	case *string:
		if v == nil {
			return errQueueJobStatusNilPtr
		}
		*x, err = ParseQueueJobStatus(*v)
	default:
		return errors.New("invalid type for QueueJobStatus")
	}

	return
}

// Value implements the driver Valuer interface.
func (x QueueJobStatus) Value() (driver.Value, error) {
	return x.String(), nil
}

type NullQueueJobStatus struct {
	QueueJobStatus QueueJobStatus
	Valid          bool
	Set            bool
}

func NewNullQueueJobStatus(val interface{}) (x NullQueueJobStatus) {
	err := x.Scan(val) // yes, we ignore this error, it will just be an invalid value.
	_ = err            // make any errcheck linters happy
	return
}

// Scan implements the Scanner interface.
func (x *NullQueueJobStatus) Scan(value interface{}) (err error) {
	if value == nil {
		x.QueueJobStatus, x.Valid = QueueJobStatus(""), false
		return
	}

	err = x.QueueJobStatus.Scan(value)
	x.Valid = (err == nil)
	return
}

// Value implements the driver Valuer interface.
func (x NullQueueJobStatus) Value() (driver.Value, error) {
	if !x.Valid {
		return nil, nil
	}
	return x.QueueJobStatus.String(), nil
}

// MarshalJSON correctly serializes a NullQueueJobStatus to JSON.
func (n NullQueueJobStatus) MarshalJSON() ([]byte, error) {
	const nullStr = "null"
	if n.Valid {
		return json.Marshal(n.QueueJobStatus)
	}
	return []byte(nullStr), nil
}

// UnmarshalJSON correctly deserializes a NullQueueJobStatus from JSON.
func (n *NullQueueJobStatus) UnmarshalJSON(b []byte) error {
	n.Set = true
	var x interface{}
	err := json.Unmarshal(b, &x)
	if err != nil {
		return err
	}
	err = n.Scan(x)
	return err
}

// MarshalGQL correctly serializes a NullQueueJobStatus to GraphQL.
func (n NullQueueJobStatus) MarshalGQL(w io.Writer) {
	bytes, err := json.Marshal(n)
	if err == nil {
		_, _ = w.Write(bytes)
	}
}

// UnmarshalGQL correctly deserializes a NullQueueJobStatus from GraphQL.
func (n *NullQueueJobStatus) UnmarshalGQL(v any) error {
	if v == nil {
		return nil
	}
	str, ok := v.(string)
	if !ok {
		return errors.New("value is not a string")
	}
	return n.UnmarshalJSON([]byte(str))
}
