// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package model

import (
	"database/sql/driver"
	"encoding/json"
	"errors"
	"fmt"
	"io"
	"strings"
)

const (
	VideoModifierREGIONAL VideoModifier = "REGIONAL"
	VideoModifierSCREENER VideoModifier = "SCREENER"
	VideoModifierRAWHD    VideoModifier = "RAWHD"
	VideoModifierBRDISK   VideoModifier = "BRDISK"
	VideoModifierREMUX    VideoModifier = "REMUX"
)

var ErrInvalidVideoModifier = fmt.Errorf("not a valid VideoModifier, try [%s]", strings.Join(_VideoModifierNames, ", "))

var _VideoModifierNames = []string{
	string(VideoModifierREGIONAL),
	string(VideoModifierSCREENER),
	string(VideoModifierRAWHD),
	string(VideoModifierBRDISK),
	string(VideoModifierREMUX),
}

// VideoModifierNames returns a list of possible string values of VideoModifier.
func VideoModifierNames() []string {
	tmp := make([]string, len(_VideoModifierNames))
	copy(tmp, _VideoModifierNames)
	return tmp
}

// VideoModifierValues returns a list of the values for VideoModifier
func VideoModifierValues() []VideoModifier {
	return []VideoModifier{
		VideoModifierREGIONAL,
		VideoModifierSCREENER,
		VideoModifierRAWHD,
		VideoModifierBRDISK,
		VideoModifierREMUX,
	}
}

// String implements the Stringer interface.
func (x VideoModifier) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x VideoModifier) IsValid() bool {
	_, err := ParseVideoModifier(string(x))
	return err == nil
}

var _VideoModifierValue = map[string]VideoModifier{
	"REGIONAL": VideoModifierREGIONAL,
	"regional": VideoModifierREGIONAL,
	"SCREENER": VideoModifierSCREENER,
	"screener": VideoModifierSCREENER,
	"RAWHD":    VideoModifierRAWHD,
	"rawhd":    VideoModifierRAWHD,
	"BRDISK":   VideoModifierBRDISK,
	"brdisk":   VideoModifierBRDISK,
	"REMUX":    VideoModifierREMUX,
	"remux":    VideoModifierREMUX,
}

// ParseVideoModifier attempts to convert a string to a VideoModifier.
func ParseVideoModifier(name string) (VideoModifier, error) {
	if x, ok := _VideoModifierValue[name]; ok {
		return x, nil
	}
	// Case insensitive parse, do a separate lookup to prevent unnecessary cost of lowercasing a string if we don't need to.
	if x, ok := _VideoModifierValue[strings.ToLower(name)]; ok {
		return x, nil
	}
	return VideoModifier(""), fmt.Errorf("%s is %w", name, ErrInvalidVideoModifier)
}

// MarshalText implements the text marshaller method.
func (x VideoModifier) MarshalText() ([]byte, error) {
	return []byte(string(x)), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *VideoModifier) UnmarshalText(text []byte) error {
	tmp, err := ParseVideoModifier(string(text))
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

var errVideoModifierNilPtr = errors.New("value pointer is nil") // one per type for package clashes

// Scan implements the Scanner interface.
func (x *VideoModifier) Scan(value interface{}) (err error) {
	if value == nil {
		*x = VideoModifier("")
		return
	}

	// A wider range of scannable types.
	// driver.Value values at the top of the list for expediency
	switch v := value.(type) {
	case string:
		*x, err = ParseVideoModifier(v)
	case []byte:
		*x, err = ParseVideoModifier(string(v))
	case VideoModifier:
		*x = v
	case *VideoModifier:
		if v == nil {
			return errVideoModifierNilPtr
		}
		*x = *v
	case *string:
		if v == nil {
			return errVideoModifierNilPtr
		}
		*x, err = ParseVideoModifier(*v)
	default:
		return errors.New("invalid type for VideoModifier")
	}

	return
}

// Value implements the driver Valuer interface.
func (x VideoModifier) Value() (driver.Value, error) {
	return x.String(), nil
}

type NullVideoModifier struct {
	VideoModifier VideoModifier
	Valid         bool
	Set           bool
}

func NewNullVideoModifier(val interface{}) (x NullVideoModifier) {
	err := x.Scan(val) // yes, we ignore this error, it will just be an invalid value.
	_ = err            // make any errcheck linters happy
	return
}

// Scan implements the Scanner interface.
func (x *NullVideoModifier) Scan(value interface{}) (err error) {
	if value == nil {
		x.VideoModifier, x.Valid = VideoModifier(""), false
		return
	}

	err = x.VideoModifier.Scan(value)
	x.Valid = (err == nil)
	return
}

// Value implements the driver Valuer interface.
func (x NullVideoModifier) Value() (driver.Value, error) {
	if !x.Valid {
		return nil, nil
	}
	return x.VideoModifier.String(), nil
}

// MarshalJSON correctly serializes a NullVideoModifier to JSON.
func (n NullVideoModifier) MarshalJSON() ([]byte, error) {
	const nullStr = "null"
	if n.Valid {
		return json.Marshal(n.VideoModifier)
	}
	return []byte(nullStr), nil
}

// UnmarshalJSON correctly deserializes a NullVideoModifier from JSON.
func (n *NullVideoModifier) UnmarshalJSON(b []byte) error {
	n.Set = true
	var x interface{}
	err := json.Unmarshal(b, &x)
	if err != nil {
		return err
	}
	err = n.Scan(x)
	return err
}

// MarshalGQL correctly serializes a NullVideoModifier to GraphQL.
func (n NullVideoModifier) MarshalGQL(w io.Writer) {
	bytes, err := json.Marshal(n)
	if err == nil {
		_, _ = w.Write(bytes)
	}
}

// UnmarshalGQL correctly deserializes a NullVideoModifier from GraphQL.
func (n *NullVideoModifier) UnmarshalGQL(v any) error {
	if v == nil {
		return nil
	}
	str, ok := v.(string)
	if !ok {
		return errors.New("value is not a string")
	}
	if str == "null" {
		return nil
	}
	return n.UnmarshalJSON([]byte("\"" + str + "\""))
}
