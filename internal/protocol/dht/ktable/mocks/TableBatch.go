// Code generated by mockery v2.35.2. DO NOT EDIT.

package ktable_mocks

import (
	ktable "github.com/bitmagnet-io/bitmagnet/internal/protocol/dht/ktable"
	mock "github.com/stretchr/testify/mock"

	netip "net/netip"

	protocol "github.com/bitmagnet-io/bitmagnet/internal/protocol"

	time "time"
)

// TableBatch is an autogenerated mock type for the TableBatch type
type TableBatch struct {
	mock.Mock
}

type TableBatch_Expecter struct {
	mock *mock.Mock
}

func (_m *TableBatch) EXPECT() *TableBatch_Expecter {
	return &TableBatch_Expecter{mock: &_m.Mock}
}

// BatchCommand provides a mock function with given fields: commands
func (_m *TableBatch) BatchCommand(commands ...ktable.Command) {
	_va := make([]interface{}, len(commands))
	for _i := range commands {
		_va[_i] = commands[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// TableBatch_BatchCommand_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BatchCommand'
type TableBatch_BatchCommand_Call struct {
	*mock.Call
}

// BatchCommand is a helper method to define mock.On call
//   - commands ...ktable.Command
func (_e *TableBatch_Expecter) BatchCommand(commands ...interface{}) *TableBatch_BatchCommand_Call {
	return &TableBatch_BatchCommand_Call{Call: _e.mock.On("BatchCommand",
		append([]interface{}{}, commands...)...)}
}

func (_c *TableBatch_BatchCommand_Call) Run(run func(commands ...ktable.Command)) *TableBatch_BatchCommand_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]ktable.Command, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(ktable.Command)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *TableBatch_BatchCommand_Call) Return() *TableBatch_BatchCommand_Call {
	_c.Call.Return()
	return _c
}

func (_c *TableBatch_BatchCommand_Call) RunAndReturn(run func(...ktable.Command)) *TableBatch_BatchCommand_Call {
	_c.Call.Return(run)
	return _c
}

// FilterKnownAddrs provides a mock function with given fields: addrs
func (_m *TableBatch) FilterKnownAddrs(addrs []netip.Addr) []netip.Addr {
	ret := _m.Called(addrs)

	var r0 []netip.Addr
	if rf, ok := ret.Get(0).(func([]netip.Addr) []netip.Addr); ok {
		r0 = rf(addrs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]netip.Addr)
		}
	}

	return r0
}

// TableBatch_FilterKnownAddrs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FilterKnownAddrs'
type TableBatch_FilterKnownAddrs_Call struct {
	*mock.Call
}

// FilterKnownAddrs is a helper method to define mock.On call
//   - addrs []netip.Addr
func (_e *TableBatch_Expecter) FilterKnownAddrs(addrs interface{}) *TableBatch_FilterKnownAddrs_Call {
	return &TableBatch_FilterKnownAddrs_Call{Call: _e.mock.On("FilterKnownAddrs", addrs)}
}

func (_c *TableBatch_FilterKnownAddrs_Call) Run(run func(addrs []netip.Addr)) *TableBatch_FilterKnownAddrs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]netip.Addr))
	})
	return _c
}

func (_c *TableBatch_FilterKnownAddrs_Call) Return(_a0 []netip.Addr) *TableBatch_FilterKnownAddrs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TableBatch_FilterKnownAddrs_Call) RunAndReturn(run func([]netip.Addr) []netip.Addr) *TableBatch_FilterKnownAddrs_Call {
	_c.Call.Return(run)
	return _c
}

// GeneratePeerID provides a mock function with given fields:
func (_m *TableBatch) GeneratePeerID() protocol.ID {
	ret := _m.Called()

	var r0 protocol.ID
	if rf, ok := ret.Get(0).(func() protocol.ID); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(protocol.ID)
		}
	}

	return r0
}

// TableBatch_GeneratePeerID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GeneratePeerID'
type TableBatch_GeneratePeerID_Call struct {
	*mock.Call
}

// GeneratePeerID is a helper method to define mock.On call
func (_e *TableBatch_Expecter) GeneratePeerID() *TableBatch_GeneratePeerID_Call {
	return &TableBatch_GeneratePeerID_Call{Call: _e.mock.On("GeneratePeerID")}
}

func (_c *TableBatch_GeneratePeerID_Call) Run(run func()) *TableBatch_GeneratePeerID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *TableBatch_GeneratePeerID_Call) Return(_a0 protocol.ID) *TableBatch_GeneratePeerID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TableBatch_GeneratePeerID_Call) RunAndReturn(run func() protocol.ID) *TableBatch_GeneratePeerID_Call {
	_c.Call.Return(run)
	return _c
}

// GetClosestPeers provides a mock function with given fields: id
func (_m *TableBatch) GetClosestPeers(id protocol.ID) []ktable.Peer {
	ret := _m.Called(id)

	var r0 []ktable.Peer
	if rf, ok := ret.Get(0).(func(protocol.ID) []ktable.Peer); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]ktable.Peer)
		}
	}

	return r0
}

// TableBatch_GetClosestPeers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetClosestPeers'
type TableBatch_GetClosestPeers_Call struct {
	*mock.Call
}

// GetClosestPeers is a helper method to define mock.On call
//   - id protocol.ID
func (_e *TableBatch_Expecter) GetClosestPeers(id interface{}) *TableBatch_GetClosestPeers_Call {
	return &TableBatch_GetClosestPeers_Call{Call: _e.mock.On("GetClosestPeers", id)}
}

func (_c *TableBatch_GetClosestPeers_Call) Run(run func(id protocol.ID)) *TableBatch_GetClosestPeers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(protocol.ID))
	})
	return _c
}

func (_c *TableBatch_GetClosestPeers_Call) Return(_a0 []ktable.Peer) *TableBatch_GetClosestPeers_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TableBatch_GetClosestPeers_Call) RunAndReturn(run func(protocol.ID) []ktable.Peer) *TableBatch_GetClosestPeers_Call {
	_c.Call.Return(run)
	return _c
}

// GetHashOrClosestPeers provides a mock function with given fields: id
func (_m *TableBatch) GetHashOrClosestPeers(id protocol.ID) ktable.GetHashOrClosestPeersResult {
	ret := _m.Called(id)

	var r0 ktable.GetHashOrClosestPeersResult
	if rf, ok := ret.Get(0).(func(protocol.ID) ktable.GetHashOrClosestPeersResult); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(ktable.GetHashOrClosestPeersResult)
	}

	return r0
}

// TableBatch_GetHashOrClosestPeers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetHashOrClosestPeers'
type TableBatch_GetHashOrClosestPeers_Call struct {
	*mock.Call
}

// GetHashOrClosestPeers is a helper method to define mock.On call
//   - id protocol.ID
func (_e *TableBatch_Expecter) GetHashOrClosestPeers(id interface{}) *TableBatch_GetHashOrClosestPeers_Call {
	return &TableBatch_GetHashOrClosestPeers_Call{Call: _e.mock.On("GetHashOrClosestPeers", id)}
}

func (_c *TableBatch_GetHashOrClosestPeers_Call) Run(run func(id protocol.ID)) *TableBatch_GetHashOrClosestPeers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(protocol.ID))
	})
	return _c
}

func (_c *TableBatch_GetHashOrClosestPeers_Call) Return(_a0 ktable.GetHashOrClosestPeersResult) *TableBatch_GetHashOrClosestPeers_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TableBatch_GetHashOrClosestPeers_Call) RunAndReturn(run func(protocol.ID) ktable.GetHashOrClosestPeersResult) *TableBatch_GetHashOrClosestPeers_Call {
	_c.Call.Return(run)
	return _c
}

// GetOldestPeers provides a mock function with given fields: cutoff, n
func (_m *TableBatch) GetOldestPeers(cutoff time.Time, n int) []ktable.Peer {
	ret := _m.Called(cutoff, n)

	var r0 []ktable.Peer
	if rf, ok := ret.Get(0).(func(time.Time, int) []ktable.Peer); ok {
		r0 = rf(cutoff, n)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]ktable.Peer)
		}
	}

	return r0
}

// TableBatch_GetOldestPeers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOldestPeers'
type TableBatch_GetOldestPeers_Call struct {
	*mock.Call
}

// GetOldestPeers is a helper method to define mock.On call
//   - cutoff time.Time
//   - n int
func (_e *TableBatch_Expecter) GetOldestPeers(cutoff interface{}, n interface{}) *TableBatch_GetOldestPeers_Call {
	return &TableBatch_GetOldestPeers_Call{Call: _e.mock.On("GetOldestPeers", cutoff, n)}
}

func (_c *TableBatch_GetOldestPeers_Call) Run(run func(cutoff time.Time, n int)) *TableBatch_GetOldestPeers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(time.Time), args[1].(int))
	})
	return _c
}

func (_c *TableBatch_GetOldestPeers_Call) Return(_a0 []ktable.Peer) *TableBatch_GetOldestPeers_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TableBatch_GetOldestPeers_Call) RunAndReturn(run func(time.Time, int) []ktable.Peer) *TableBatch_GetOldestPeers_Call {
	_c.Call.Return(run)
	return _c
}

// GetPeersForSampleInfoHashes provides a mock function with given fields: n
func (_m *TableBatch) GetPeersForSampleInfoHashes(n int) []ktable.Peer {
	ret := _m.Called(n)

	var r0 []ktable.Peer
	if rf, ok := ret.Get(0).(func(int) []ktable.Peer); ok {
		r0 = rf(n)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]ktable.Peer)
		}
	}

	return r0
}

// TableBatch_GetPeersForSampleInfoHashes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPeersForSampleInfoHashes'
type TableBatch_GetPeersForSampleInfoHashes_Call struct {
	*mock.Call
}

// GetPeersForSampleInfoHashes is a helper method to define mock.On call
//   - n int
func (_e *TableBatch_Expecter) GetPeersForSampleInfoHashes(n interface{}) *TableBatch_GetPeersForSampleInfoHashes_Call {
	return &TableBatch_GetPeersForSampleInfoHashes_Call{Call: _e.mock.On("GetPeersForSampleInfoHashes", n)}
}

func (_c *TableBatch_GetPeersForSampleInfoHashes_Call) Run(run func(n int)) *TableBatch_GetPeersForSampleInfoHashes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *TableBatch_GetPeersForSampleInfoHashes_Call) Return(_a0 []ktable.Peer) *TableBatch_GetPeersForSampleInfoHashes_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TableBatch_GetPeersForSampleInfoHashes_Call) RunAndReturn(run func(int) []ktable.Peer) *TableBatch_GetPeersForSampleInfoHashes_Call {
	_c.Call.Return(run)
	return _c
}

// Origin provides a mock function with given fields:
func (_m *TableBatch) Origin() protocol.ID {
	ret := _m.Called()

	var r0 protocol.ID
	if rf, ok := ret.Get(0).(func() protocol.ID); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(protocol.ID)
		}
	}

	return r0
}

// TableBatch_Origin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Origin'
type TableBatch_Origin_Call struct {
	*mock.Call
}

// Origin is a helper method to define mock.On call
func (_e *TableBatch_Expecter) Origin() *TableBatch_Origin_Call {
	return &TableBatch_Origin_Call{Call: _e.mock.On("Origin")}
}

func (_c *TableBatch_Origin_Call) Run(run func()) *TableBatch_Origin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *TableBatch_Origin_Call) Return(_a0 protocol.ID) *TableBatch_Origin_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TableBatch_Origin_Call) RunAndReturn(run func() protocol.ID) *TableBatch_Origin_Call {
	_c.Call.Return(run)
	return _c
}

// SampleHashesAndPeers provides a mock function with given fields:
func (_m *TableBatch) SampleHashesAndPeers() ktable.SampleHashesAndPeersResult {
	ret := _m.Called()

	var r0 ktable.SampleHashesAndPeersResult
	if rf, ok := ret.Get(0).(func() ktable.SampleHashesAndPeersResult); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(ktable.SampleHashesAndPeersResult)
	}

	return r0
}

// TableBatch_SampleHashesAndPeers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SampleHashesAndPeers'
type TableBatch_SampleHashesAndPeers_Call struct {
	*mock.Call
}

// SampleHashesAndPeers is a helper method to define mock.On call
func (_e *TableBatch_Expecter) SampleHashesAndPeers() *TableBatch_SampleHashesAndPeers_Call {
	return &TableBatch_SampleHashesAndPeers_Call{Call: _e.mock.On("SampleHashesAndPeers")}
}

func (_c *TableBatch_SampleHashesAndPeers_Call) Run(run func()) *TableBatch_SampleHashesAndPeers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *TableBatch_SampleHashesAndPeers_Call) Return(_a0 ktable.SampleHashesAndPeersResult) *TableBatch_SampleHashesAndPeers_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TableBatch_SampleHashesAndPeers_Call) RunAndReturn(run func() ktable.SampleHashesAndPeersResult) *TableBatch_SampleHashesAndPeers_Call {
	_c.Call.Return(run)
	return _c
}

// NewTableBatch creates a new instance of TableBatch. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTableBatch(t interface {
	mock.TestingT
	Cleanup(func())
}) *TableBatch {
	mock := &TableBatch{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
