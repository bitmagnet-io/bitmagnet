package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.55

import (
	"context"

	"github.com/bitmagnet-io/bitmagnet/internal/client"
	"github.com/bitmagnet-io/bitmagnet/internal/gql"
	"github.com/bitmagnet-io/bitmagnet/internal/gql/gqlmodel"
	"github.com/bitmagnet-io/bitmagnet/internal/protocol"
)

// Download is the resolver for the download field.
func (r *downloadClientMutationResolver) Download(ctx context.Context, obj *gqlmodel.DownloadClientMutation, infoHashes []protocol.ID) (*string, error) {
	c := client.New(&r.ClientConfig, r.Search)
	err := c.AddInfoHashes(ctx,
		client.AddInfoHashesRequest{
			ClientID:   r.ClientConfig.DownloadClient,
			InfoHashes: infoHashes,
		})

	return nil, err
}

// Torrent is the resolver for the torrent field.
func (r *mutationResolver) Torrent(ctx context.Context) (gqlmodel.TorrentMutation, error) {
	return gqlmodel.TorrentMutation{}, nil
}

// Queue is the resolver for the queue field.
func (r *mutationResolver) Queue(ctx context.Context) (gqlmodel.QueueMutation, error) {
	return gqlmodel.QueueMutation{QueueManager: r.QueueManager}, nil
}

// Downloadclient is the resolver for the downloadclient field.
func (r *mutationResolver) Downloadclient(ctx context.Context) (gqlmodel.DownloadClientMutation, error) {
	return gqlmodel.DownloadClientMutation{}, nil
}

// Delete is the resolver for the delete field.
func (r *torrentMutationResolver) Delete(ctx context.Context, obj *gqlmodel.TorrentMutation, infoHashes []protocol.ID) (*string, error) {
	_, err := r.Dao.DeleteAndBlockTorrents(ctx, infoHashes)
	return nil, err
}

// PutTags is the resolver for the putTags field.
func (r *torrentMutationResolver) PutTags(ctx context.Context, obj *gqlmodel.TorrentMutation, infoHashes []protocol.ID, tagNames []string) (*string, error) {
	return nil, r.Dao.TorrentTag.Put(ctx, infoHashes, tagNames)
}

// SetTags is the resolver for the setTags field.
func (r *torrentMutationResolver) SetTags(ctx context.Context, obj *gqlmodel.TorrentMutation, infoHashes []protocol.ID, tagNames []string) (*string, error) {
	return nil, r.Dao.TorrentTag.Set(ctx, infoHashes, tagNames)
}

// DeleteTags is the resolver for the deleteTags field.
func (r *torrentMutationResolver) DeleteTags(ctx context.Context, obj *gqlmodel.TorrentMutation, infoHashes []protocol.ID, tagNames []string) (*string, error) {
	return nil, r.Dao.TorrentTag.Delete(ctx, infoHashes, tagNames)
}

// DownloadClientMutation returns gql.DownloadClientMutationResolver implementation.
func (r *Resolver) DownloadClientMutation() gql.DownloadClientMutationResolver {
	return &downloadClientMutationResolver{r}
}

// Mutation returns gql.MutationResolver implementation.
func (r *Resolver) Mutation() gql.MutationResolver { return &mutationResolver{r} }

// TorrentMutation returns gql.TorrentMutationResolver implementation.
func (r *Resolver) TorrentMutation() gql.TorrentMutationResolver { return &torrentMutationResolver{r} }

type downloadClientMutationResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type torrentMutationResolver struct{ *Resolver }
